package com.gs.bookkeeping.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gs.bookkeeping.main.beans.InfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INFO_BEAN".
*/
public class InfoBeanDao extends AbstractDao<InfoBean, Long> {

    public static final String TABLENAME = "INFO_BEAN";

    /**
     * Properties of entity InfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Num = new Property(2, String.class, "num", false, "NUM");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property NumF = new Property(4, Float.class, "numF", false, "NUM_F");
        public final static Property Des = new Property(5, String.class, "des", false, "DES");
    }


    public InfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public InfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"NUM\" TEXT," + // 2: num
                "\"DATE\" TEXT," + // 3: date
                "\"NUM_F\" REAL," + // 4: numF
                "\"DES\" TEXT);"); // 5: des
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(3, num);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        Float numF = entity.getNumF();
        if (numF != null) {
            stmt.bindDouble(5, numF);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(6, des);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(3, num);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        Float numF = entity.getNumF();
        if (numF != null) {
            stmt.bindDouble(5, numF);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(6, des);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InfoBean readEntity(Cursor cursor, int offset) {
        InfoBean entity = new InfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // numF
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // des
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InfoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNumF(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setDes(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InfoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InfoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InfoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
